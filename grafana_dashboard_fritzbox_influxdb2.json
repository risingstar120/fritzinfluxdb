{
    "__inputs": [
      {
        "name": "DS_INFLUXDB2",
        "label": "InfluxDB2",
        "description": "",
        "type": "datasource",
        "pluginId": "influxdb",
        "pluginName": "InfluxDB"
      },
      {
        "name": "VAR_MEASUREMENT",
        "type": "constant",
        "label": "InfluxDB measurement",
        "value": "fritzbox",
        "description": ""
      },
      {
        "name": "VAR_BUCKET",
        "type": "constant",
        "label": "InfluxDB bucket",
        "value": "fritzflux",
        "description": ""
      },
      {
        "name": "VAR_DOWN_MAX",
        "type": "constant",
        "label": "Max Down Speed (Mbit)",
        "value": "100",
        "description": ""
      },
      {
        "name": "VAR_UP_MAX",
        "type": "constant",
        "label": "Max Up Speed (Mbit)",
        "value": "40",
        "description": ""
      },
      {
        "name": "VAR_DATA_INTERVAL",
        "type": "constant",
        "label": "Data retrieval Interval",
        "value": "10",
        "description": ""
      }
    ],
    "__requires": [
      {
        "type": "panel",
        "id": "gauge",
        "name": "Gauge",
        "version": ""
      },
      {
        "type": "grafana",
        "id": "grafana",
        "name": "Grafana",
        "version": "7.4.1"
      },
      {
        "type": "panel",
        "id": "graph",
        "name": "Graph",
        "version": ""
      },
      {
        "type": "datasource",
        "id": "influxdb",
        "name": "InfluxDB",
        "version": "1.0.0"
      },
      {
        "type": "panel",
        "id": "singlestat",
        "name": "Singlestat",
        "version": ""
      },
      {
        "type": "panel",
        "id": "stat",
        "name": "Stat",
        "version": ""
      },
      {
        "type": "panel",
        "id": "table",
        "name": "Table",
        "version": ""
      }
    ],
    "editable": true,
    "gnetId": null,
    "graphTooltip": 0,
    "id": null,
    "iteration": 1613552794909,
    "links": [],
    "panels": [
      {
        "aliasColors": {},
        "bars": false,
        "dashLength": 10,
        "dashes": false,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "custom": {},
            "links": []
          },
          "overrides": []
        },
        "fill": 1,
        "fillGradient": 0,
        "gridPos": {
          "h": 13,
          "w": 24,
          "x": 0,
          "y": 0
        },
        "hiddenSeries": false,
        "id": 2,
        "legend": {
          "avg": false,
          "current": false,
          "max": false,
          "min": false,
          "show": true,
          "total": false,
          "values": false
        },
        "lines": true,
        "linewidth": 1,
        "links": [],
        "nullPointMode": "null",
        "options": {
          "alertThreshold": true
        },
        "percentage": false,
        "pluginVersion": "7.4.1",
        "pointradius": 5,
        "points": false,
        "renderer": "flot",
        "seriesOverrides": [
          {
            "alias": "/UP.*/",
            "transform": "negative-Y"
          },
          {
            "alias": "/.*Physical Max/",
            "color": "#64b0c8",
            "fill": 0
          },
          {
            "alias": "/.*DSL Sync/",
            "color": "#3f6833",
            "fill": 0
          },
          {
            "alias": "/.*netto Max/",
            "color": "#890f02",
            "fill": 0
          },
          {
            "alias": "/.*rror.*/",
            "bars": true,
            "yaxis": 2
          }
        ],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": false,
        "targets": [
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"sendrate\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _value: r._value *8,\n      _field: \"UP\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "refId": "A",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"receiverate\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _value: r._value *8,\n      _field: \"DOWN\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "refId": "B",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"downstreammax\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _field: \"DOWN netto Max\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "refId": "C",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"downstreamphysicalmax\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _field: \"DOWN Physical Max\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "refId": "D",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"downstream_dsl_sync_max\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _value: r._value * 1000,\n      _field: \"DOWN DSL Sync\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "rawQuery": false,
            "refId": "E",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"upstreammax\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _field: \"UP netto Max\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "rawQuery": false,
            "refId": "F",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"upstreamphysicalmax\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _field: \"UP Physical Max\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "refId": "G",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"upstream_dsl_sync_max\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _value: r._value * 1000,\n      _field: \"UP DSL Sync\"\n    })\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
            "refId": "H",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"crc_errors\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _field: \"CRC Errors\"\n    })\n  )\n  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: [\"_value\"], timeColumn: \"_time\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
            "refId": "I",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"errored_seconds\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _field: \"Errored Seconds\"\n    })\n  )\n  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: [\"_value\"], timeColumn: \"_time\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
            "refId": "J",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"${measurement}\" and\n    r._field == \"severely_errored_seconds\"\n  )\n  |> map(fn: (r) => ({\n      r with\n      _field: \"Severely Errored Seconds\"\n    })\n  )\n  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: [\"_value\"], timeColumn: \"_time\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
            "refId": "K",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": [],
        "timeFrom": null,
        "timeRegions": [],
        "timeShift": null,
        "title": "Current UP/DOWN",
        "tooltip": {
          "shared": true,
          "sort": 0,
          "value_type": "individual"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "decimals": null,
            "format": "bps",
            "label": "DSL Speed",
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          },
          {
            "decimals": 0,
            "format": "short",
            "label": "Errors",
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        }
      },
      {
        "cacheTimeout": null,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [
              {
                "id": 0,
                "op": "=",
                "text": "N/A",
                "type": 1,
                "value": "null"
              },
              {
                "id": 1,
                "op": "=",
                "text": "No",
                "type": 1,
                "value": "0"
              },
              {
                "id": 2,
                "op": "=",
                "text": "Yes",
                "type": 1,
                "value": "1"
              }
            ],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#6ed0e0",
                  "value": null
                },
                {
                  "color": "dark-blue",
                  "value": 0
                },
                {
                  "color": "#508642",
                  "value": 1
                }
              ]
            },
            "unit": "none"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 2,
          "x": 0,
          "y": 13
        },
        "id": 4,
        "interval": null,
        "links": [],
        "maxDataPoints": 100,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "horizontal",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "text": {},
          "textMode": "auto"
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"upgrade_available\")\n  |> last()",
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "title": "Update Available",
        "type": "stat"
      },
      {
        "cacheTimeout": null,
        "colorBackground": false,
        "colorValue": false,
        "colors": [
          "rgba(245, 54, 54, 0.9)",
          "rgba(237, 129, 40, 0.89)",
          "#1f78c1"
        ],
        "datasource": "${DS_INFLUXDB2}",
        "decimals": 2,
        "fieldConfig": {
          "defaults": {
            "custom": {}
          },
          "overrides": []
        },
        "format": "dtdurations",
        "gauge": {
          "maxValue": 100,
          "minValue": 0,
          "show": false,
          "thresholdLabels": false,
          "thresholdMarkers": true
        },
        "gridPos": {
          "h": 2,
          "w": 6,
          "x": 2,
          "y": 13
        },
        "hideTimeOverride": true,
        "id": 6,
        "interval": null,
        "links": [],
        "mappingType": 1,
        "mappingTypes": [
          {
            "name": "value to text",
            "value": 1
          },
          {
            "name": "range to text",
            "value": 2
          }
        ],
        "maxDataPoints": 100,
        "nullPointMode": "connected",
        "nullText": null,
        "postfix": "",
        "postfixFontSize": "50%",
        "prefix": "",
        "prefixFontSize": "50%",
        "rangeMaps": [
          {
            "from": "null",
            "text": "N/A",
            "to": "null"
          }
        ],
        "sparkline": {
          "fillColor": "rgba(31, 118, 189, 0.18)",
          "full": false,
          "lineColor": "rgb(31, 120, 193)",
          "show": false
        },
        "tableColumn": "",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"linkuptime\")\n  |> last()\n",
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": "1,1",
        "timeFrom": "5m",
        "timeShift": null,
        "title": "DSL Link Uptime",
        "type": "singlestat",
        "valueFontSize": "50%",
        "valueMaps": [
          {
            "op": "=",
            "text": "N/A",
            "value": "null"
          },
          {
            "op": "=",
            "text": "Disconnected",
            "value": "0"
          }
        ],
        "valueName": "current"
      },
      {
        "cacheTimeout": null,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "continuous-GrYlRd"
            },
            "custom": {},
            "decimals": 1,
            "mappings": [],
            "min": 0,
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "rgba(245, 54, 54, 0.9)",
                  "value": null
                }
              ]
            },
            "unit": "Bps"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 3,
          "x": 8,
          "y": 13
        },
        "id": 10,
        "interval": null,
        "links": [],
        "maxDataPoints": 100,
        "options": {
          "orientation": "horizontal",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^receiverate$/",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": false,
          "text": {}
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"receiverate\")\n  |> last()\n",
            "refId": "A",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\"  and r._field == \"downstreammax\")\n  |> last()\n  |> map(fn: (r) => ({\n      r with\n      _value: r._value / 8,\n    })\n  )",
            "refId": "B",
            "resultFormat": "time_series"
          }
        ],
        "title": "Current Download",
        "type": "gauge"
      },
      {
        "cacheTimeout": null,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "continuous-YlBl"
            },
            "custom": {},
            "decimals": 1,
            "mappings": [],
            "min": 0,
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "rgba(245, 54, 54, 0.9)",
                  "value": null
                }
              ]
            },
            "unit": "Bps"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 3,
          "x": 11,
          "y": 13
        },
        "id": 12,
        "interval": null,
        "links": [],
        "maxDataPoints": 100,
        "options": {
          "orientation": "horizontal",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^sendrate$/",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": false,
          "text": {}
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"sendrate\")\n  |> last()\n",
            "refId": "A",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\"  and r._field == \"upstreammax\")\n  |> last()\n  |> map(fn: (r) => ({\n      r with\n      _value: r._value / 8,\n    })\n  )",
            "refId": "B",
            "resultFormat": "time_series"
          }
        ],
        "title": "Current Upload",
        "type": "gauge"
      },
      {
        "cacheTimeout": null,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "decimals": 3,
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "red",
                  "value": null
                }
              ]
            },
            "unit": "decbytes"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 5,
          "x": 14,
          "y": 13
        },
        "hideTimeOverride": true,
        "id": 14,
        "interval": null,
        "links": [],
        "maxDataPoints": 100,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "horizontal",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "text": {},
          "textMode": "auto"
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytessent\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n",
            "rawQuery": true,
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "timeFrom": "24h",
        "timeShift": null,
        "title": "Total Upload since connection",
        "description": "Don't trust this values, FritzBox seems to have an issue to reset 'totalbytessent' to 0 on reconnect",
        "type": "stat"
      },
      {
        "cacheTimeout": null,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "semi-dark-blue",
                  "value": null
                }
              ]
            },
            "unit": "decbytes"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 5,
          "x": 19,
          "y": 13
        },
        "hideTimeOverride": true,
        "id": 16,
        "interval": null,
        "links": [],
        "maxDataPoints": 100,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "horizontal",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "text": {},
          "textMode": "auto"
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytesreceived\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n",
            "rawQuery": true,
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "timeFrom": "24h",
        "title": "Total Download since connection",
        "description": "Don't trust this values, FritzBox seems to have an issue to reset 'totalbytesreceived' to 0 on reconnect",
        "type": "stat"
      },
      {
        "cacheTimeout": null,
        "colorBackground": false,
        "colorValue": false,
        "colors": [
          "rgba(245, 54, 54, 0.9)",
          "rgba(237, 129, 40, 0.89)",
          "rgba(50, 172, 45, 0.97)"
        ],
        "datasource": "${DS_INFLUXDB2}",
        "decimals": 2,
        "fieldConfig": {
          "defaults": {
            "custom": {}
          },
          "overrides": []
        },
        "format": "dtdurations",
        "gauge": {
          "maxValue": 100,
          "minValue": 0,
          "show": false,
          "thresholdLabels": false,
          "thresholdMarkers": true
        },
        "gridPos": {
          "h": 2,
          "w": 6,
          "x": 2,
          "y": 15
        },
        "hideTimeOverride": true,
        "id": 8,
        "interval": null,
        "links": [],
        "mappingType": 1,
        "mappingTypes": [
          {
            "name": "value to text",
            "value": 1
          },
          {
            "name": "range to text",
            "value": 2
          }
        ],
        "maxDataPoints": 100,
        "nullPointMode": "connected",
        "nullText": null,
        "postfix": "",
        "postfixFontSize": "50%",
        "prefix": "",
        "prefixFontSize": "50%",
        "rangeMaps": [
          {
            "from": "null",
            "text": "N/A",
            "to": "null"
          }
        ],
        "sparkline": {
          "fillColor": "rgba(31, 118, 189, 0.18)",
          "full": false,
          "lineColor": "rgb(31, 120, 193)",
          "show": false
        },
        "tableColumn": "",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"systemuptime\")\n  |> last()\n",
            "rawQuery": false,
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": "1,1",
        "timeFrom": "5m",
        "title": "System Uptime",
        "type": "singlestat",
        "valueFontSize": "50%",
        "valueMaps": [
          {
            "op": "=",
            "text": "N/A",
            "value": "null"
          }
        ],
        "valueName": "current"
      },
      {
        "cacheTimeout": null,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "decimals": 3,
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "semi-dark-red",
                  "value": null
                }
              ]
            },
            "unit": "decbytes"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 0,
          "y": 17
        },
        "id": 18,
        "interval": null,
        "links": [],
        "maxDataPoints": 100,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "horizontal",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "text": {},
          "textMode": "auto"
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytessent\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < ${up_max} * ${data_interval} * 2 * 100000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n ",
            "rawQuery": true,
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "timeFrom": "24h",
        "timeShift": null,
        "title": "Last 24h Upload",
        "type": "stat"
      },
      {
        "cacheTimeout": null,
        "datasource": "${DS_INFLUXDB2}",
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "semi-dark-blue",
                  "value": null
                }
              ]
            },
            "unit": "decbytes"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 6,
          "y": 17
        },
        "hideTimeOverride": false,
        "id": 20,
        "interval": null,
        "links": [],
        "maxDataPoints": 100,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "text": {},
          "textMode": "auto"
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "dsType": "influxdb",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytesreceived\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < ${down_max} * ${data_interval} * 2 * 100000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")\n",
            "rawQuery": true,
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "timeFrom": "24h",
        "timeShift": null,
        "title": "Last 24h Download",
        "type": "stat"
      },
      {
        "aliasColors": {
          "Download": "semi-dark-blue",
          "Upload": "#e24d42",
          "download": "#1F78C1",
          "upload": "#EA6460"
        },
        "annotate": {
          "enable": false
        },
        "bars": true,
        "dashLength": 10,
        "dashes": false,
        "datasource": "${DS_INFLUXDB2}",
        "decimals": null,
        "editable": true,
        "fieldConfig": {
          "defaults": {
            "custom": {},
            "links": []
          },
          "overrides": []
        },
        "fill": 0,
        "fillGradient": 0,
        "grid": {},
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 17
        },
        "hiddenSeries": false,
        "id": 22,
        "interval": "1h",
        "legend": {
          "avg": false,
          "current": true,
          "max": false,
          "min": false,
          "show": true,
          "total": true,
          "values": true
        },
        "lines": false,
        "linewidth": 1,
        "links": [],
        "nullPointMode": "null",
        "options": {
          "alertThreshold": false
        },
        "percentage": false,
        "pluginVersion": "7.4.1",
        "pointradius": 5,
        "points": false,
        "renderer": "flot",
        "resolution": 100,
        "scale": 1,
        "seriesOverrides": [],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": true,
        "targets": [
          {
            "dsType": "influxdb",
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytesreceived\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < ${down_max} * ${data_interval} * 2 * 100000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> map(fn: (r) => ({ r with _field: \"Download\" }))\n  |> yield(name: \"last\")\n\n",
            "rawQuery": true,
            "refId": "A",
            "resultFormat": "time_series"
          },
          {
            "dsType": "influxdb",
            "fill": "null",
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytessent\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < ${up_max} * ${data_interval} * 2 * 100000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> map(fn: (r) => ({ r with _field: \"Upload\" }))\n  |> yield(name: \"last\")\n\n",
            "rawQuery": true,
            "refId": "B",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": [],
        "timeFrom": "24h",
        "timeRegions": [],
        "timeShift": null,
        "title": "Current Traffic",
        "tooltip": {
          "msResolution": false,
          "query_as_alias": true,
          "shared": true,
          "sort": 0,
          "value_type": "cumulative"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "decimals": null,
            "format": "decbytes",
            "label": "",
            "logBase": 1,
            "max": null,
            "min": 0,
            "show": true
          },
          {
            "format": "short",
            "logBase": 1,
            "max": null,
            "min": null,
            "show": false
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        },
        "zerofill": true
      },
      {
        "aliasColors": {
          "Download": "#1f78c1",
          "Upload": "#e24d42",
          "fritzbox_value.non_negative_derivative": "#ba43a9",
          "fritzbox_value.non_negative_difference": "#e24d42"
        },
        "bars": true,
        "dashLength": 10,
        "dashes": false,
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "custom": {},
            "links": []
          },
          "overrides": []
        },
        "fill": 1,
        "fillGradient": 0,
        "gridPos": {
          "h": 7,
          "w": 12,
          "x": 0,
          "y": 20
        },
        "hiddenSeries": false,
        "id": 24,
        "interval": "24h",
        "legend": {
          "alignAsTable": false,
          "avg": false,
          "current": true,
          "hideEmpty": false,
          "hideZero": false,
          "max": false,
          "min": false,
          "rightSide": false,
          "show": true,
          "total": false,
          "values": true
        },
        "lines": false,
        "linewidth": 1,
        "links": [],
        "maxDataPoints": null,
        "nullPointMode": "null",
        "options": {
          "alertThreshold": true
        },
        "percentage": false,
        "pluginVersion": "7.4.1",
        "pointradius": 5,
        "points": false,
        "renderer": "flot",
        "seriesOverrides": [],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": false,
        "targets": [
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytesreceived\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < ${down_max} * ${data_interval} * 2 * 100000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> map(fn: (r) => ({ r with _field: \"Download\" }))\n  |> yield(name: \"last\")",
            "refId": "A",
            "resultFormat": "time_series"
          },
          {
            "hide": false,
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytessent\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < ${up_max} * ${data_interval} * 2 * 100000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> map(fn: (r) => ({ r with _field: \"Upload\" }))",
            "refId": "B",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": [],
        "timeFrom": "7d",
        "timeRegions": [],
        "timeShift": null,
        "title": "Daily Traffic",
        "tooltip": {
          "shared": true,
          "sort": 0,
          "value_type": "individual"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "decimals": null,
            "format": "decbytes",
            "label": "",
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          },
          {
            "format": "decbytes",
            "label": null,
            "logBase": 1,
            "max": null,
            "min": null,
            "show": false
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        }
      },
      {
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": null,
              "filterable": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Metric"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Name"
                },
                {
                  "id": "mappings",
                  "value": [
                    {
                      "from": "",
                      "id": 1,
                      "text": "Link Status",
                      "to": "",
                      "type": 1,
                      "value": "connection_status"
                    },
                    {
                      "from": "",
                      "id": 2,
                      "text": "External IPv4",
                      "to": "",
                      "type": 1,
                      "value": "external_ip"
                    },
                    {
                      "from": "",
                      "id": 3,
                      "text": "External IPv6",
                      "to": "",
                      "type": 1,
                      "value": "external_ipv6"
                    },
                    {
                      "from": "",
                      "id": 4,
                      "text": "Last Connect Error",
                      "to": "",
                      "type": 1,
                      "value": "last_connection_error"
                    },
                    {
                      "from": "",
                      "id": 5,
                      "text": "Model",
                      "to": "",
                      "type": 1,
                      "value": "model"
                    },
                    {
                      "from": "",
                      "id": 6,
                      "text": "Number of Hosts",
                      "to": "",
                      "type": 1,
                      "value": "number_of_hosts"
                    },
                    {
                      "from": "",
                      "id": 7,
                      "text": "Link Status",
                      "to": "",
                      "type": 1,
                      "value": "physicallinkstatus"
                    },
                    {
                      "from": "",
                      "id": 8,
                      "text": "Link Type",
                      "to": "",
                      "type": 1,
                      "value": "physicallinktype"
                    },
                    {
                      "from": "",
                      "id": 9,
                      "text": "Remote POP",
                      "to": "",
                      "type": 1,
                      "value": "remote_pop"
                    },
                    {
                      "from": "",
                      "id": 10,
                      "text": "Serial",
                      "to": "",
                      "type": 1,
                      "value": "serialnumber"
                    },
                    {
                      "from": "",
                      "id": 11,
                      "text": "SW Version",
                      "to": "",
                      "type": 1,
                      "value": "softwareversion"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 10,
          "w": 12,
          "x": 12,
          "y": 25
        },
        "hideTimeOverride": true,
        "id": 29,
        "interval": "",
        "links": [],
        "options": {
          "frameIndex": 1,
          "showHeader": true
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "groupBy": [],
            "hide": false,
            "limit": "1",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and (\n    r[\"_field\"] == \"connection_status\" or \n    r[\"_field\"] == \"physicallinkstatus\" or \n    r[\"_field\"] == \"physicallinktype\" or \n    r[\"_field\"] == \"last_connection_error\" or \n    r[\"_field\"] == \"external_ip\" or \n    r[\"_field\"] == \"external_ipv6\" or \n    r[\"_field\"] == \"remote_pop\" or \n    r[\"_field\"] == \"model\" or \n    r[\"_field\"] == \"serialnumber\" or \n    r[\"_field\"] == \"softwareversion\" or \n    r[\"_field\"] == \"number_of_hosts\"))\n  |> last()\n  |> keep(columns: [\"_time\",\"_field\", \"_value\"])\n\n",
            "rawQuery": false,
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "timeFrom": "1m",
        "timeShift": null,
        "title": "FritzBox Info",
        "transformations": [
          {
            "id": "seriesToRows",
            "options": {
              "reducers": []
            }
          }
        ],
        "type": "table"
      },
      {
        "datasource": "${DS_INFLUXDB2}",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": null,
              "filterable": false
            },
            "decimals": 2,
            "displayName": "",
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "decbytes"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Time"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Time"
                },
                {
                  "id": "unit",
                  "value": "time: MMMM D, YYYY LT"
                },
                {
                  "id": "custom.align",
                  "value": null
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Upload fritzbox"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Upload"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Download fritzbox"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Download"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 27
        },
        "id": 27,
        "interval": "24h",
        "links": [],
        "options": {
          "frameIndex": 1,
          "showHeader": true
        },
        "pluginVersion": "7.4.1",
        "targets": [
          {
            "alias": "Download",
            "dsType": "influxdb",
            "measurement": "fritzbox_value",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytessent\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < 45000000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> map(fn: (r) => ({ r with _field: \"Upload\" }))\n  |> yield(name: \"last\")",
            "rawQuery": true,
            "refId": "A",
            "resultFormat": "time_series"
          },
          {
            "alias": "Upload",
            "dsType": "influxdb",
            "measurement": "fritzbox_value",
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\" and r[\"_field\"] == \"totalbytesreceived\")\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> fill(column: \"_value\", usePrevious: true)\n  |> filter(fn: (r) => r._value < 150000000)\n  |> cumulativeSum(columns: [\"_value\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> difference(nonNegative: true, columns: [\"_value\"])\n  |> map(fn: (r) => ({ r with _field: \"Download\" }))\n  |> yield(name: \"last\")",
            "rawQuery": true,
            "refId": "B",
            "resultFormat": "time_series"
          }
        ],
        "timeFrom": "7d",
        "timeShift": null,
        "title": "Daily Traffic",
        "transformations": [
          {
            "id": "seriesToColumns",
            "options": {}
          }
        ],
        "type": "table"
      }
    ],
    "refresh": "10s",
    "schemaVersion": 27,
    "style": "dark",
    "tags": [],
    "templating": {
      "list": [
        {
          "description": "Measurement name for the fritzflux data",
          "error": null,
          "hide": 2,
          "label": "InfluxDB measurement",
          "name": "measurement",
          "query": "${VAR_MEASUREMENT}",
          "skipUrlSync": false,
          "type": "constant",
          "current": {
            "value": "${VAR_MEASUREMENT}",
            "text": "${VAR_MEASUREMENT}",
            "selected": false
          },
          "options": [
            {
              "value": "${VAR_MEASUREMENT}",
              "text": "${VAR_MEASUREMENT}",
              "selected": false
            }
          ]
        },
        {
          "description": "Bucket name for the fritzflux data",
          "error": null,
          "hide": 2,
          "label": "InfluxDB bucket",
          "name": "bucket",
          "query": "${VAR_BUCKET}",
          "skipUrlSync": false,
          "type": "constant",
          "current": {
            "value": "${VAR_BUCKET}",
            "text": "${VAR_BUCKET}",
            "selected": false
          },
          "options": [
            {
              "value": "${VAR_BUCKET}",
              "text": "${VAR_BUCKET}",
              "selected": false
            }
          ]
        },
        {
          "description": "This is used to filter out wrong values",
          "error": null,
          "hide": 2,
          "label": "Max Down Speed (Mbit)",
          "name": "down_max",
          "query": "${VAR_DOWN_MAX}",
          "skipUrlSync": false,
          "type": "constant",
          "current": {
            "value": "${VAR_DOWN_MAX}",
            "text": "${VAR_DOWN_MAX}",
            "selected": false
          },
          "options": [
            {
              "value": "${VAR_DOWN_MAX}",
              "text": "${VAR_DOWN_MAX}",
              "selected": false
            }
          ]
        },
        {
          "description": "This is used to filter out wrong values",
          "error": null,
          "hide": 2,
          "label": "Max Up Speed (Mbit)",
          "name": "up_max",
          "query": "${VAR_UP_MAX}",
          "skipUrlSync": false,
          "type": "constant",
          "current": {
            "value": "${VAR_UP_MAX}",
            "text": "${VAR_UP_MAX}",
            "selected": false
          },
          "options": [
            {
              "value": "${VAR_UP_MAX}",
              "text": "${VAR_UP_MAX}",
              "selected": false
            }
          ]
        },
        {
          "description": "Interval of FritzBox data written to InfluxDB",
          "error": null,
          "hide": 2,
          "label": "Data retrieval Interval (seconds)",
          "name": "data_interval",
          "query": "${VAR_DATA_INTERVAL}",
          "skipUrlSync": false,
          "type": "constant",
          "current": {
            "value": "${VAR_DATA_INTERVAL}",
            "text": "${VAR_DATA_INTERVAL}",
            "selected": false
          },
          "options": [
            {
              "value": "${VAR_DATA_INTERVAL}",
              "text": "${VAR_DATA_INTERVAL}",
              "selected": false
            }
          ]
        }
      ]
    },
    "time": {
      "from": "now-24h",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "browser",
    "title": "FRITZ!Box Router Status",
    "uid": "FritzFlux",
    "version": 1
  }
